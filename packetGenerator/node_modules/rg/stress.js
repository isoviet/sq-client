'use strict';

let Long = require('long');

let Future = require('./future');
let Client = require('./client');
let Auth = require('./auth');

function stress(settings)
{
	settings = settings || {};

	settings.keys = settings.keys || {};
	settings.minId = settings.minId || 1;
	settings.maxId = settings.maxId || 100;
	settings.useAdmin = (settings.useAdmin == undefined ? true : settings.useAdmin);
	settings.packetDuration = settings.packetDuration || 200;
	settings.server = settings.server || {};
	settings.verbose = settings.verbose;

	let packets = settings.packets;

	let server =
	{
		host : settings.server.host,
		port : settings.server.port,
		reconnect : true,
		reconnectDuration : settings.server.reconnectDuration,
		verbose : settings.verbose,
		groupSize : settings.server.groupSize,
		deviceSize : settings.server.deviceSize
	};

	let auth = new Auth(settings.keys);
	let clients = [];

	let packetsNames = Object.keys(packets.client);

	let randomPacket = (client) =>
	{
		if (!client.connected)
			return;

		let packetName = packetsNames[~~(Math.random() * packetsNames.length)];
		let packet = packets.client[packetName];
		client.sendRandom(packet);

		Future.delay(settings.packetDuration).then(randomPacket.bind(null, client));
	};

	for (let i = settings.minId; i <= settings.maxId; ++i)
	{
		let client = new Client(packets, server);
		let type = auth.randomType(settings.useAdmin);
		let netId = new Long(i);

		console.log(`create stress user ${type.toString()}:${netId}`);

		client.on('error', (error) => console.log(error.message));

		client.on('connect', () =>
		{
			console.log(`stress user ${type.toString()}:${netId} connected`);

			client.sendRaw(packets.client.HELLO)
			.then(() => client.send(packets.client.LOGIN, auth.generate(type, netId, {referrer: 0, tag: 0})))
			.catch((error) => console.error(error.stack));
		});

		client.on(packets.server.LOGIN, (packet, data) =>
		{
			if (data.status !== 0)
			{
				console.log(`client ${type}:${netId} can't login - reconnect`);
				client.disconnect();
				return;
			}

			randomPacket(client);
		});

		client.connect();

		clients.push(client);
	}
}

module.exports = stress;