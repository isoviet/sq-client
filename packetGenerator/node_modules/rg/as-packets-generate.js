'use strict';

let fs = require('fs');
let path = require('path');

function getFile(path)
{
	return fs.readFileSync(path, {encoding : 'utf8'});
}

function getFiles(folderPath)
{
	let result = {};

	fs.readdirSync(folderPath).forEach((name) =>
	{
		result[path.parse(name).name] = getFile(path.join(folderPath, name));
	});

	return result;
}

function mergeMetaTypes(types, metaTypes)
{
	for (var key in metaTypes)
	{
		if (!metaTypes.hasOwnProperty(key))
			continue;

		let type = metaTypes[key];
		type.regexp = new RegExp(`^${type.prefix}.*${type.postfix}$`);

		types[key] = type;
	}
}

function getSettings()
{
	let settings = getFile('./settings.json');
	settings = JSON.parse(settings);

	if (!settings)
		throw new Error('not found data in settings');

	let fields =
	{
		'packetsPath':		{isfiles : false, isFile: true},
		'outputPath':		{isfiles : false, isFile: false},
		'abstract':			{isfiles : false, isFile: false},
		'templates':		{isfiles : false, isFile: false},
		'parsers':			{isfiles : true, isFile: false},
		'builders':			{isfiles : true, isFile: false},
		'readers':			{isfiles : true, isFile: false},
		'codeParsing':		{isfiles : true, isFile: false},
		'codeBuilding':		{isfiles : true, isFile: false},
		'codeReading':		{isfiles : true, isFile: false},
		'code':				{isfiles : true, isFile: false},
		'manager':			{isfiles : true, isFile: false},
		'types':			{isfiles : false, isFile: false},
		'metaTypes':		{isfiles : false, isFile: false},
		'counters':			{isfiles : false, isFile: false},
	}

	let result = {};

	for (let key in settings)
	{
		if (!fields.hasOwnProperty(key))
			throw new Error(`invalid setting '${key}' in settings`);

		if (fields[key].isfiles)
			result[key] = getFiles(settings[key]);
		else if (fields[key].isFile)
			result[key] = getFile(settings[key]);
		else
			result[key] = settings[key];
	}

	for (let key in fields)
	{
		if (!settings.hasOwnProperty(key))
			throw new Error(`not found '${key}' in settings`);
	}

	result.abstract.file = getFile(settings.abstract.file);

	mergeMetaTypes(settings.types, settings.metaTypes);

	return result;
}

// try
// {
	let settings = getSettings();

	let format = require('./format');
	format.generateAs3Classes(settings);
// }
// catch (error)
// {
// 	console.error(error.message);
// }