'use strict';
let Future = require('bluebird');

Future.promisifyAll(require('fs'));

function pause(mseconds)
{
	return () => Future.delay(mseconds);
}

function run(value, index, array, prev)
{
	if (typeof value === 'function')
		value = value(prev);

	let future = (value instanceof Future) ? value : Future.resolve(value);

	index++;
	if (index >= array.length)
		return future;

	return future.then(() => run(array[index], index, array, future.value()));
}

function sequence()
{
	let array = Array.prototype.slice.call(arguments);
	if (Array.isArray(array[0]))
		array = array[0];

	if (array.length === 0)
		return Future.resolve();

	return run(array[0], 0, array);
}

Future.prototype.sequence = function()
{
	let args = Array.prototype.slice.call(arguments);

	return this.then(() => sequence.apply(null, args));
};

Future.pause = pause;
Future.sequence = sequence;

module.exports = Future;