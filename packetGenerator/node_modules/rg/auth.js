'use strict';

let Long = require('long');
let crypto = require('crypto');

let KEYS = Symbol('private');

function md5(data)
{
	return crypto.createHash('md5').update(data).digest('hex');
}

function sha256(data, key)
{
	return crypto.createHmac('sha256', key).update(data).digest('base64');
}

class Type
{
	constructor(name, numericType)
	{
		this.name = name;
		this.numericType = numericType;
	}

	toString()
	{
		return this.name;
	}

	valueOf()
	{
		return this.numericType;
	}
}

class Auth
{
	constructor(keys)
	{
		this[KEYS] = keys;
	}

	randomType(hasAdmin)
	{
		let types = Object.keys(this[KEYS]);

		if (!hasAdmin)
		{
			let id = types.indexOf('ADMIN');

			if (id >= 0)
				types.splice(id, 1);
		}

		return Auth[types[~~(Math.random() * types.length)]];
	}

	generate(type, netId, additionFields)
	{
		let typeId = type.valueOf();
		type = type.toString();

		if (!Long.isLong(netId))
			throw new Error(`Invalid netId '${netId}', expected Long`);

		let keys = this[KEYS][type];

		if (keys === undefined)
			throw new Error(`Has no auth keys for type ${type}`);

		let method = methods[type];

		if (method === undefined)
			throw new Error(`Has no auth method for type ${type}`);

		let data = method(keys, netId);

		if (data === undefined)
			throw new Error(`invalid auth for type ${type}`);

		data.type = typeId;
		data.net_id = netId;

		if (additionFields === undefined)
			return data;

		for (let key in additionFields)
		{
			if (!additionFields.hasOwnProperty(key))
				continue;

			data[key] = additionFields[key];
		}

		return data;
	}

	generate128(type, netId, additionFields)
	{
		let data = this.generate(type, netId, additionFields);
		data.net_id = {high : 0, low : data.net_id};

		return data;
	}
}

Auth.VK = new Type('VK', 0);
Auth.MM = new Type('MM', 1);
Auth.OK = new Type('OK', 4);
Auth.FB = new Type('FB', 5);
Auth.FS = new Type('FS', 30);
Auth.RG = new Type('RG', 32);
Auth.SWAP = new Type('SWAP', 64);
Auth.ADMIN = new Type('ADMIN', 255);

function defaultMethod(keys, netId)
{
	return {
		auth_key : md5(`${keys.id}_${netId}_${keys.secret}`)
	};
}

let methods =
{
	"VK" : defaultMethod,
	"MM" : defaultMethod,
	"FS" : defaultMethod,
	"RG" : defaultMethod,

	"OK" : (keys, netId) =>
	{
		let sessionKey = md5(Math.random().toString());

		return {
			auth_key : md5(`${netId}${sessionKey}${keys.secret}`),
			session_key : sessionKey
		};
	},

	"FB" : (keys) =>
	{
		let sessionKey = md5(Math.random().toString());

		return {
			auth_key : sha256(sessionKey, keys.secret),
			session_key : sessionKey
		};
	},

	"ADMIN" : (keys) =>
	{
		return {
			auth_key : keys.secret
		};
	}
};

module.exports = Auth;